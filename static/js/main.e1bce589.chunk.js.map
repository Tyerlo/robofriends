{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","registerServiceWorker.js","reducer.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","CounterButton","updateCount","state","count","setState","nextProps","nextState","this","color","onClick","Component","Header","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","intialStateSearch","intialStateRobots","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.e1bce589.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React, { Component } from \"react\";\n\nclass CounterButton extends Component {\n  constructor() {\n    super();\n    this.state = {\n      count: 0\n    };\n  }\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.count !== nextState.count) {\n      return true;\n    }\n    return false;\n  }\n\n  updateCount = () => {\n    const { count } = this.state;\n    this.setState(state => {\n      return {\n        count: state.count + 1\n      };\n    });\n  };\n  render() {\n    const { count } = this.state;\n    return (\n      <button color={this.props.color} onClick={this.updateCount}>\n        Count: {count}\n      </button>\n    );\n  }\n}\nexport default CounterButton;\n","import React, { Component } from \"react\";\nimport CounterButton from \"./CounterButton\";\n\nclass Header extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return false;\n  }\n  render() {\n    return (\n      <div>\n        <h1 className=\"f1\">RoboFriends</h1>\n        <CounterButton color={\"red\"} />\n      </div>\n    );\n  }\n}\nexport default Header;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport \"./App.css\";\nimport { setSearchField, requestRobots } from \"../actions\";\nimport Header from \"../components/Header\";\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    return isPending ? (\n      <h1>Loading</h1>\n    ) : (\n      <div className=\"tc\">\n        <Header />\n        <SearchBox searchChange={onSearchChange} />\n        <Scroll>\n          <CardList robots={filteredRobots} />\n        </Scroll>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCHFIELD,\n  REQUEST_ROBOTS_FAILED,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS\n} from \"./constants\";\n\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCHFIELD,\n  payload: text\n});\n\nexport const requestRobots = () => dispatch => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch(\"https://jsonplaceholder.typicode.com/users\").then(response =>\n    response\n      .json()\n      .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n      .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n  );\n};\n","export const CHANGE_SEARCHFIELD = \"CHANGE_SEARCHFIELD\";\n\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  CHANGE_SEARCHFIELD,\n  REQUEST_ROBOTS_FAILED,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS\n} from \"./constants\";\nconst intialStateSearch = {\n  searchField: \"\"\n};\n\nexport const searchRobots = (state = intialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCHFIELD:\n      return { ...state, searchField: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst intialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: \"\"\n};\n\nexport const requestRobots = (state = intialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return { ...state, isPending: true };\n\n    case REQUEST_ROBOTS_SUCCESS:\n      return { ...state, robots: action.payload, isPending: false };\n\n    case REQUEST_ROBOTS_FAILED:\n      return { ...state, error: action.payload, isPending: false };\n\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\nimport \"tachyons\";\nimport { createLogger } from \"redux-logger\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { searchRobots, requestRobots } from \"./reducer\";\nimport thunkMiddleware from \"redux-thunk\";\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\nregisterServiceWorker();\n"],"sourceRoot":""}